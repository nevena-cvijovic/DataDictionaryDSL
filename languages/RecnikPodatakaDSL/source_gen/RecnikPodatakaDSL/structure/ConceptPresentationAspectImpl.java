package RecnikPodatakaDSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Aggregation;
  private ConceptPresentation props_CharacterDomain;
  private ConceptPresentation props_Constraint;
  private ConceptPresentation props_DateDomain;
  private ConceptPresentation props_Details;
  private ConceptPresentation props_Domain;
  private ConceptPresentation props_DomainStructureReference;
  private ConceptPresentation props_ExclusiveSpecialization;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_FieldDefinition;
  private ConceptPresentation props_InclusiveSpecialization;
  private ConceptPresentation props_IntegerDomain;
  private ConceptPresentation props_LogicalDomain;
  private ConceptPresentation props_PredefinedDomain;
  private ConceptPresentation props_RealDomain;
  private ConceptPresentation props_SemanticDomain;
  private ConceptPresentation props_Set;
  private ConceptPresentation props_Structure;
  private ConceptPresentation props_StructureReference;
  private ConceptPresentation props_StructureRepository;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Aggregation:
        if (props_Aggregation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Aggregation = cpb.create();
        }
        return props_Aggregation;
      case LanguageConceptSwitch.CharacterDomain:
        if (props_CharacterDomain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CharacterDomain = cpb.create();
        }
        return props_CharacterDomain;
      case LanguageConceptSwitch.Constraint:
        if (props_Constraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Constraint = cpb.create();
        }
        return props_Constraint;
      case LanguageConceptSwitch.DateDomain:
        if (props_DateDomain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DateDomain = cpb.create();
        }
        return props_DateDomain;
      case LanguageConceptSwitch.Details:
        if (props_Details == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Details = cpb.create();
        }
        return props_Details;
      case LanguageConceptSwitch.Domain:
        if (props_Domain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Domain = cpb.create();
        }
        return props_Domain;
      case LanguageConceptSwitch.DomainStructureReference:
        if (props_DomainStructureReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DomainStructureReference = cpb.create();
        }
        return props_DomainStructureReference;
      case LanguageConceptSwitch.ExclusiveSpecialization:
        if (props_ExclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExclusiveSpecialization = cpb.create();
        }
        return props_ExclusiveSpecialization;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.FieldDefinition:
        if (props_FieldDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x3978377fb27d4046L, 0x8bb64e4d30e8b603L, 0xc0192cc4ac8e34bL, 0xc0192cc4ac8e34cL, "fieldRef", "", "");
          props_FieldDefinition = cpb.create();
        }
        return props_FieldDefinition;
      case LanguageConceptSwitch.InclusiveSpecialization:
        if (props_InclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InclusiveSpecialization = cpb.create();
        }
        return props_InclusiveSpecialization;
      case LanguageConceptSwitch.IntegerDomain:
        if (props_IntegerDomain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IntegerDomain = cpb.create();
        }
        return props_IntegerDomain;
      case LanguageConceptSwitch.LogicalDomain:
        if (props_LogicalDomain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_LogicalDomain = cpb.create();
        }
        return props_LogicalDomain;
      case LanguageConceptSwitch.PredefinedDomain:
        if (props_PredefinedDomain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PredefinedDomain = cpb.create();
        }
        return props_PredefinedDomain;
      case LanguageConceptSwitch.RealDomain:
        if (props_RealDomain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RealDomain = cpb.create();
        }
        return props_RealDomain;
      case LanguageConceptSwitch.SemanticDomain:
        if (props_SemanticDomain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SemanticDomain = cpb.create();
        }
        return props_SemanticDomain;
      case LanguageConceptSwitch.Set:
        if (props_Set == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Set = cpb.create();
        }
        return props_Set;
      case LanguageConceptSwitch.Structure:
        if (props_Structure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Structure = cpb.create();
        }
        return props_Structure;
      case LanguageConceptSwitch.StructureReference:
        if (props_StructureReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StructureReference = cpb.create();
        }
        return props_StructureReference;
      case LanguageConceptSwitch.StructureRepository:
        if (props_StructureRepository == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StructureRepository = cpb.create();
        }
        return props_StructureRepository;
    }
    return null;
  }
}
