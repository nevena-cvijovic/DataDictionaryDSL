package RecnikPodatakaDSL.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.SimpleRoleScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class FieldDefinition_Constraints extends BaseConstraintsDescriptor {
  public FieldDefinition_Constraints() {
    super(CONCEPTS.FieldDefinition$UF);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.fieldRef$vjkq, this, true, false) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return new SNodePointer("r:8adf1beb-37fb-44f2-af14-c0a184bdfa2d(RecnikPodatakaDSL.constraints)", "5251919615975776490");
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            return SimpleRoleScope.forNamedElements(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.Structure$je, false, false), LINKS.fields$3GOB);
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept FieldDefinition$UF = MetaAdapterFactory.getConcept(0x3978377fb27d4046L, 0x8bb64e4d30e8b603L, 0xc0192cc4ac8e34bL, "RecnikPodatakaDSL.structure.FieldDefinition");
    /*package*/ static final SConcept Structure$je = MetaAdapterFactory.getConcept(0x3978377fb27d4046L, 0x8bb64e4d30e8b603L, 0xc0192cc4ac7ef01L, "RecnikPodatakaDSL.structure.Structure");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink fieldRef$vjkq = MetaAdapterFactory.getReferenceLink(0x3978377fb27d4046L, 0x8bb64e4d30e8b603L, 0xc0192cc4ac8e34bL, 0xc0192cc4ac8e34cL, "fieldRef");
    /*package*/ static final SContainmentLink fields$3GOB = MetaAdapterFactory.getContainmentLink(0x3978377fb27d4046L, 0x8bb64e4d30e8b603L, 0xc0192cc4ac7ef01L, 0xc0192cc4ac8bf1dL, "fields");
  }
}
