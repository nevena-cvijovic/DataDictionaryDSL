package RecnikPodatakaDSL.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_FieldDefinition_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_FieldDefinition_NonTypesystemRule() {
  }
  public void applyRule(final SNode fieldDefinition, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode parent = (SNode) SNodeOperations.getParent(fieldDefinition);
    for (SNode fieldDef : ListSequence.fromList(SLinkOperations.getChildren(parent, LINKS.fieldDef$w9nV))) {
      if (fieldDefinition != fieldDef) {
        if (SPropertyOperations.getString(SLinkOperations.getTarget(fieldDef, LINKS.fieldRef$vjkq), PROPS.name$MnvL).equalsIgnoreCase(SPropertyOperations.getString(SLinkOperations.getTarget(fieldDefinition, LINKS.fieldRef$vjkq), PROPS.name$MnvL))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fieldDefinition, "There is already a field definition for this field", "r:24ac4287-029c-4578-b1eb-0b9b6159757c(RecnikPodatakaDSL.typesystem)", "865134009559868539", null, errorTarget);
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.FieldDefinition$UF;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink fieldRef$vjkq = MetaAdapterFactory.getReferenceLink(0x3978377fb27d4046L, 0x8bb64e4d30e8b603L, 0xc0192cc4ac8e34bL, 0xc0192cc4ac8e34cL, "fieldRef");
    /*package*/ static final SContainmentLink fieldDef$w9nV = MetaAdapterFactory.getContainmentLink(0x3978377fb27d4046L, 0x8bb64e4d30e8b603L, 0xc0192cc4ac7ef01L, 0xc0192cc4ac8e397L, "fieldDef");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept FieldDefinition$UF = MetaAdapterFactory.getConcept(0x3978377fb27d4046L, 0x8bb64e4d30e8b603L, 0xc0192cc4ac8e34bL, "RecnikPodatakaDSL.structure.FieldDefinition");
  }
}
